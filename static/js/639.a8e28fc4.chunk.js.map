{"version":3,"file":"static/js/639.a8e28fc4.chunk.js","mappings":"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","sources":["components/Section/Section.styled.js","components/Section/Section.jsx","components/AddContactsForm/AddContactsForm.styled.js","components/Button/Button.styled.js","components/Button/Button.jsx","redux/filter/selectors.js","redux/contacts/selectors.js","components/AddContactsForm/AddContactsForm.jsx","components/ContactsList/ContactsList.styled.js","components/ContactsList/ContactsList.jsx","components/Filter/Filter.jsx","components/App/App.styled.js","pages/Contacts/Contacts.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Block = styled.div`\n  &:not(:last-child) {\n  margin-bottom: 20px;\n}\n`;\n\nexport const Title = styled.h2`\n  font-size: 20px;\n  margin-bottom: 10px;\n`;\n","import PropTypes from 'prop-types';\nimport {Block, Title} from './Section.styled';\n\nexport const Section = ({ title, children }) => (\n    <>\n      <Block>\n        <Title>{title}</Title>\n        {children}\n      </Block>\n    </>\n  );\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.node,\n};","import styled from 'styled-components';\n\nexport const Form = styled.form`\n  padding: 15px;\n  border: 1px solid #8a2be2;\n  box-shadow: 0px 1px 3px rgba(0, 0, 0, 0.12), 0px 1px 1px rgba(0, 0, 0, 0.14),\n    0px 2px 1px rgba(0, 0, 0, 0.2);\n  background-color: #ffffff;\n`;\n\nexport const Label = styled.label`\n  margin-bottom: 4px;\n  cursor: pointer;\n\n  font-size: 16px;\n  line-height: 1.2;\n  font-weight: bold;\n  color: #8a2be2;\n`;\n\nexport const Input = styled.input`\n  box-sizing: border-box;\n  display: block;\n  outline: none;\n  width: 100%;\n  padding: 5px;\n  margin-bottom: 10px;\n  border-radius: 4px;\n\n  border: 1px solid #8a2be2;\n  transition: border 250ms ease;\n\n  &:hover,\n  &:focus {\n    border: 1px solid #6a0dad;\n  }\n`;\n","import styled from 'styled-components';\n\nexport const Btn = styled.button`\n  display: flex;\n  background-color: #b19cd9;\n  color: #fff;\n  padding: 10px 20px;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover {\n    background-color: #9376b0;\n  }\n`;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Btn } from './Button.styled';\n\nexport const Button = ({ children }) => <Btn>{children}</Btn>;\n\nButton.propTypes = {\n  children: PropTypes.string.isRequired,  \n};\n","export const selectFilter = state => state.filter;","import { createSelector } from '@reduxjs/toolkit';\nimport { selectFilter } from '../filter/selectors';\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, { filter }) => {\n    // {console.log(filter)\n    if (contacts === []) {\n      return;\n    }\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import React, { useState } from 'react';\nimport { nanoid } from '@reduxjs/toolkit';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { Form, Label, Input } from './AddContactsForm.styled';\nimport { Button } from 'components/Button/Button';\n\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\n\nexport const AddContactsForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const handleChange = e => {\n    const { name, value } = e.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    \n    const isExistName = contacts.find(\n      contact => contact.name.toLowerCase() === name.toLowerCase()\n    );\n  \n    if (isExistName) {\n      alert(`${name} is already in contacts list!`);\n    } else {\n      dispatch(addContact({name, number}));\n    }\n\n    formReset();\n  };\n\n  const formReset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Label htmlFor={nanoid()}>Name</Label>\n      <Input\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n        value={name}\n        onChange={handleChange}\n        id={nanoid()}\n      />\n\n      <Label htmlFor={nanoid()}>Number</Label>\n      <Input\n        type=\"tel\"\n        name=\"number\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n        value={number}\n        onChange={handleChange}\n        id={nanoid()}\n      />\n      <Button type=\"submit\">Add contact</Button>\n    </Form>\n  );\n};\n\n","import styled from 'styled-components';\n\nexport const Contact = styled.li`\n  display: flex;\n\n  gap: 10px;\n  align-items: center;\n  padding: 8px;  \n  background-color: #f7f7f7;\n\n  &:not(:last-child) {\n    margin-bottom: 10px;\n  }\n\n  button {\n    margin-left: auto;\n    display: flex;\n    background-color: #b19cd9;\n    color: #fff;\n    padding: 10px 20px;\n    border: none;\n    border-radius: 4px;\n    cursor: pointer;\n    transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n    &:hover {\n      background-color: #9376b0;\n    }\n  }\n`;\n","import { FiUser } from 'react-icons/fi';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { selectVisibleContacts } from 'redux/contacts/selectors';\nimport { deleteContact } from 'redux/contacts/operations';\n\nimport { Contact } from './ContactsList.styled';\n\nexport const ContactsList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectVisibleContacts);\n\n  const handleDeleteContact = contactId => dispatch(deleteContact(contactId));\n\n  return (\n    <ul>\n      {contacts?.map(({ id, name, number }) => (\n        <Contact key={id}>\n          <FiUser />\n          {name}: {number}\n          <button type=\"button\" onClick={() => handleDeleteContact(id)}>\n            Delete\n          </button>\n        </Contact>\n      ))}\n    </ul>\n  );\n};\n","import React from 'react';\nimport { nanoid } from '@reduxjs/toolkit';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport {selectFilter } from 'redux/filter/selectors';\nimport { setFilter } from 'redux/filter/filterSlice';\n\nimport {\n  Label,\n  Input,\n} from 'components/AddContactsForm/AddContactsForm.styled';\n\nexport const Filter = ({ value, onChange }) => {\n  const dispatch = useDispatch();\n  const {filter} = useSelector(selectFilter);\n\n  const changeFilter = e => dispatch(setFilter(e.target.value));\n\n  return (\n    <>\n      <Label htmlFor={nanoid()}>Find contacts by name</Label>\n      <Input\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        onChange={changeFilter}\n        id={nanoid()}\n      />\n    </>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  max-width: 370px;\n  margin-left: auto;\n  margin-right: auto;\n  padding: 10px 15px;\n  border: 1px solid #8a2be2;\n  box-shadow: 0px 1px 3px rgba(0, 0, 0, 0.12), 0px 1px 1px rgba(0, 0, 0, 0.14),\n    0px 2px 1px rgba(0, 0, 0, 0.2);\n  background-color: #ffffff;\n`;\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { Section } from 'components/Section/Section';\nimport { AddContactsForm } from 'components/AddContactsForm/AddContactsForm';\nimport { ContactsList } from 'components/ContactsList/ContactsList';\nimport { Filter } from 'components/Filter/Filter';\nimport { Wrapper } from 'components/App/App.styled';\nimport Loader from 'components/Loader/Loader';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectError, selectIsLoading } from 'redux/contacts/selectors';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Wrapper>\n      <Section title=\"Phonebook\">\n        <AddContactsForm />\n      </Section>\n      <Section title=\"Contacts\">\n        <Filter />\n        <ContactsList />\n        {isLoading && !error && <Loader />}\n        {!isLoading && error && <p>Sorry, but something go wrong...</p>}\n      </Section>\n    </Wrapper>\n  );\n};\n\nexport default Contacts;\n"],"names":["Block","styled","Title","Section","title","children","Form","Label","Input","Btn","Button","selectFilter","state","filter","selectContacts","contacts","items","selectIsLoading","isLoading","selectError","error","selectVisibleContacts","createSelector","contact","name","toLowerCase","includes","AddContactsForm","useState","setName","number","setNumber","dispatch","useDispatch","useSelector","handleChange","e","target","value","formReset","onSubmit","preventDefault","find","alert","addContact","htmlFor","nanoid","type","pattern","required","onChange","id","Contact","ContactsList","map","onClick","contactId","deleteContact","Filter","setFilter","Wrapper","useEffect","fetchContacts","Loader"],"sourceRoot":""}